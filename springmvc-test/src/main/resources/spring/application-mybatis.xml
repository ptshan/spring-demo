<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">
    <alias name="dataSourceTarget" alias="dataSource"/>

    <!--<bean id="dataSourceProxy" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">-->
        <!--<constructor-arg ref="dataSourceTarget"></constructor-arg>-->
    <!--</bean>-->

    <!-- 配置dbcp数据源 -->
    <bean id="dataSourceTarget" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="maxWait" value="${jdbc.maxWait}"/>
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <!-- <property name="maxIdle" value="${jdbc.maxIdle}"/>-->
        <property name="timeBetweenEvictionRunsMillis" value="3000"/>
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'x' FROM DUAL"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="false"/>
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
        <property name="filters" value="stat,wall"/>
        <property name="useGlobalDataSourceStat" value="true"/>
        <!--<property name="proxyFilters">-->
        <!--<list>-->
        <!--<ref bean="log-filter"/>-->
        <!--</list>-->
        <!--</property>-->
    </bean>

    <!--<bean id="log-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">-->
    <!--<property name="statementCreateAfterLogEnabled" value="false"/>-->
    <!--<property name="statementPrepareAfterLogEnabled" value="false"/>-->
    <!--<property name="statementPrepareCallAfterLogEnabled" value="false"/>-->
    <!--<property name="statementCloseAfterLogEnabled" value="false"/>-->
    <!--<property name="statementParameterSetLogEnabled" value="false"/>-->
    <!--<property name="statementParameterClearLogEnable" value="false"/>-->
    <!--<property name="statementExecutableSqlLogEnable" value="false"/>-->
    <!--</bean>-->

    <!--<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">-->
    <!--</bean>-->

    <!--<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">-->
    <!--<property name="patterns">-->
    <!--<list>-->
    <!--<value>com.cs.dsd.service..*</value>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->

    <!--<aop:config proxy-target-class="true">-->
    <!--<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut"/>-->
    <!--</aop:config>-->
    <!-- 使用JDBC事物 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- AOP配置事物 -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="query*" read-only="true" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="get*" read-only="true" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="*" read-only="true" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <!-- 配置AOP切面 -->
    <aop:config proxy-target-class="true">
        <aop:pointcut id="transactionPointcut" expression="execution(* pers.qianshifengyi.springmvc..*.*(..))"/>
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice"/>
    </aop:config>
    <!-- 使用annotation注解方式配置事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>





    <!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="pers.qianshifengyi.springmvc.mapper"/>
        <property name="annotationClass" value="pers.qianshifengyi.springmvc.util.MyBatisRepository"/>
    </bean>

    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
        <property name="typeAliasesPackage" value="pers.qianshifengyi.springmvc.model"/>
        <!-- 显式指定Mapper文件位置 -->
        <property name="mapperLocations" value="classpath:/mapper/*Mapper.xml"/>
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            dialect=mysql
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>
</beans>